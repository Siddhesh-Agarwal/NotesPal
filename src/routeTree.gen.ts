/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as NotesIndexRouteImport } from './routes/notes/index'
import { Route as NotesNoteIdRouteImport } from './routes/notes/$noteId'
import { Route as ApiCheckoutRouteImport } from './routes/api/checkout'
import { Route as ApiWebhooksPolarRouteImport } from './routes/api/webhooks/polar'
import { Route as ApiWebhooksClerkRouteImport } from './routes/api/webhooks/clerk'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const NotesIndexRoute = NotesIndexRouteImport.update({
  id: '/notes/',
  path: '/notes/',
  getParentRoute: () => rootRouteImport,
} as any)
const NotesNoteIdRoute = NotesNoteIdRouteImport.update({
  id: '/notes/$noteId',
  path: '/notes/$noteId',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiCheckoutRoute = ApiCheckoutRouteImport.update({
  id: '/api/checkout',
  path: '/api/checkout',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiWebhooksPolarRoute = ApiWebhooksPolarRouteImport.update({
  id: '/api/webhooks/polar',
  path: '/api/webhooks/polar',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiWebhooksClerkRoute = ApiWebhooksClerkRouteImport.update({
  id: '/api/webhooks/clerk',
  path: '/api/webhooks/clerk',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/api/checkout': typeof ApiCheckoutRoute
  '/notes/$noteId': typeof NotesNoteIdRoute
  '/notes': typeof NotesIndexRoute
  '/api/webhooks/clerk': typeof ApiWebhooksClerkRoute
  '/api/webhooks/polar': typeof ApiWebhooksPolarRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/api/checkout': typeof ApiCheckoutRoute
  '/notes/$noteId': typeof NotesNoteIdRoute
  '/notes': typeof NotesIndexRoute
  '/api/webhooks/clerk': typeof ApiWebhooksClerkRoute
  '/api/webhooks/polar': typeof ApiWebhooksPolarRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/api/checkout': typeof ApiCheckoutRoute
  '/notes/$noteId': typeof NotesNoteIdRoute
  '/notes/': typeof NotesIndexRoute
  '/api/webhooks/clerk': typeof ApiWebhooksClerkRoute
  '/api/webhooks/polar': typeof ApiWebhooksPolarRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/api/checkout'
    | '/notes/$noteId'
    | '/notes'
    | '/api/webhooks/clerk'
    | '/api/webhooks/polar'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/api/checkout'
    | '/notes/$noteId'
    | '/notes'
    | '/api/webhooks/clerk'
    | '/api/webhooks/polar'
  id:
    | '__root__'
    | '/'
    | '/api/checkout'
    | '/notes/$noteId'
    | '/notes/'
    | '/api/webhooks/clerk'
    | '/api/webhooks/polar'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ApiCheckoutRoute: typeof ApiCheckoutRoute
  NotesNoteIdRoute: typeof NotesNoteIdRoute
  NotesIndexRoute: typeof NotesIndexRoute
  ApiWebhooksClerkRoute: typeof ApiWebhooksClerkRoute
  ApiWebhooksPolarRoute: typeof ApiWebhooksPolarRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notes/': {
      id: '/notes/'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof NotesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notes/$noteId': {
      id: '/notes/$noteId'
      path: '/notes/$noteId'
      fullPath: '/notes/$noteId'
      preLoaderRoute: typeof NotesNoteIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/checkout': {
      id: '/api/checkout'
      path: '/api/checkout'
      fullPath: '/api/checkout'
      preLoaderRoute: typeof ApiCheckoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/webhooks/polar': {
      id: '/api/webhooks/polar'
      path: '/api/webhooks/polar'
      fullPath: '/api/webhooks/polar'
      preLoaderRoute: typeof ApiWebhooksPolarRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/webhooks/clerk': {
      id: '/api/webhooks/clerk'
      path: '/api/webhooks/clerk'
      fullPath: '/api/webhooks/clerk'
      preLoaderRoute: typeof ApiWebhooksClerkRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ApiCheckoutRoute: ApiCheckoutRoute,
  NotesNoteIdRoute: NotesNoteIdRoute,
  NotesIndexRoute: NotesIndexRoute,
  ApiWebhooksClerkRoute: ApiWebhooksClerkRoute,
  ApiWebhooksPolarRoute: ApiWebhooksPolarRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
